def print_board(board):
    """
    Function to print the Tic-Tac-Toe board.
    Args:
        board: 2D list representing the current state of the game board.
    """
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

def create_board():
    """
    Function to create an empty Tic-Tac-Toe board.
    Returns:
        2D list representing the empty game board.
    """
    return [[' ' for _ in range(3)] for _ in range(3)]

def get_move(player):
    """
    Function to get a valid move from the player.
    Args:
        player: Current player ('X' or 'O').
    Returns:
        Tuple representing the row and column of the player's move.
    """
    while True:
        try:
            print(f"Player {player}, enter your move :")
            move = int(input("Enter your move (1-9): "))
            if move in range(1, 10):
                row = 2 - (move - 1) // 3
                col = (move - 1) % 3
                return row, col
            else:
                print("Invalid input. Please enter a number between 1 and 9.")
        except ValueError:
            print("Invalid input. Please enter an integer.")

def make_move(board, player, row, col):
    """
    Function to make a move on the board.
    Args:
        board: 2D list representing the current state of the game board.
        player: Current player ('X' or 'O').
        row: Row index of the move.
        col: Column index of the move.
    Returns:
        Boolean indicating whether the move was successful.
    """
    if board[row][col] == ' ':
        board[row][col] = player
        return True
    else:
        print("That position is already taken. Please try again.")
        return False

def check_winner(board, player):
    """
    Function to check if a player has won the game.
    Args:
        board: 2D list representing the current state of the game board.
        player: Current player ('X' or 'O').
    Returns:
        Boolean indicating whether the player has won.
    """
    for i in range(3):
        if all(board[i][j] == player for j in range(3)):  # Check rows
            return True
        if all(board[j][i] == player for j in range(3)):  # Check columns
            return True
    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):  # Check diagonals
        return True
    return False

def play_again():
    """
    Function to ask the player if they want to play again.
    Returns:
        Boolean indicating whether the player wants to play again.
    """
    while True:
        choice = input("Do you want to play again? (yes/no): ").lower()
        if choice == 'yes':
            return True
        elif choice == 'no':
            return False
        else:
            print("Invalid input. Please enter 'yes' or 'no'.")

def main():
    """
    Main function to control the flow of the game.
    """
    while True:
        board = create_board()
        print("Welcome to Tic-Tac-Toe!")
        print("Use numpad layout to enter your move:")
        print(" 7 | 8 | 9 ")
        print("---+---+---")
        print(" 4 | 5 | 6 ")
        print("---+---+---")
        print(" 1 | 2 | 3 ")
        print_board(board)
        players = ['X', 'O']
        current_player = players[0]

        while True:
            row, col = get_move(current_player)
            if make_move(board, current_player, row, col):
                print_board(board)
                if check_winner(board, current_player):
                    print(f"Player {current_player} wins!")
                    break
                elif all(cell != ' ' for row in board for cell in row):
                    print("It's a draw!")
                    break
                current_player = players[1] if current_player == players[0] else players[0]

        if not play_again():
            break

if __name__ == "__main__":
    main()
